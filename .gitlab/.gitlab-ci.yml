default:
  image: "python:3.8-slim-bullseye"
  tags:
    - twosix

stages:
  - "ðŸ“¡ Code Linting"
  - "ðŸš§ Static Analysis"
  - "ðŸ§ª Unit Tests"
  - "ðŸ“– Generate Docs"
  - "ðŸ”¨ Build"
  - "ðŸš€ Publish"

variables:
  LC_ALL: "C.UTF-8"
  LANG: "C.UTF-8"
  DEBIAN_FRONTEND: noninteractive
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/pip"
  PYTHON_VENV_DIR: "$CI_PROJECT_DIR/venv"
  ARMORY_CI_TEST: 1
  PYTEST_PARAMS: >-
    --exitfirst
    --suppress-no-test-exit-code

cache: &global_cache
  key: shared-job-key
  policy: pull-push
  untracked: true
  paths:
    - $PIP_CACHE_DIR

before_script:
  - apt-get update -qqy
  - apt-get install -qqy --no-install-recommends --no-install-suggests git libgl1-mesa-glx gnupg build-essential rsync make software-properties-common
  - python -m pip install --upgrade pip build wheel
  # Set up authenticated access for JATIC gitlab repositories
  - echo -e "machine gitlab.jatic.net\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.jatic.net".insteadof "ssh://git@gitlab.jatic.net"
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.jatic.net/".insteadOf "git@gitlab.jatic.net:"

.default_rules:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "web"  # Manually-triggered pipelines

code-linting:
  stage: "ðŸ“¡ Code Linting"
  rules:
    - !reference [.default_rules, rules]
  script:
    - pip install pre-commit
    - make lint

static_analysis:
  stage: "ðŸš§ Static Analysis"
  artifacts:
    paths:
      - bandit_scan.txt
    expire_in: 6 hours
    when: on_success
  allow_failure: true
  dependencies:
    - code-linting
  rules:
    - !reference [.default_rules, rules]
  script:
    - pip install bandit mypy
    - make scan

unit-test:
  stage: "ðŸ§ª Unit Tests"
  dependencies:
    - code-linting
  rules:
    - !reference [.default_rules, rules]
  script:
    - make install
    - make test

examples-test:
  stage: "ðŸ§ª Unit Tests"
  dependencies:
    - code-linting
  rules:
    - !reference [.default_rules, rules]
  script:
    - cd examples
    - make install
    - make test

pages:
  stage: "ðŸ“– Generate Docs"
  artifacts:
    paths:
      - public
  dependencies:
    - code-linting
    - unit-test
  rules:
    - !reference [.default_rules, rules]
  script:
    - pip install mkdocs mkdocstrings mkdocs-exclude mkdocs-material
    - make docs

build:
  stage: "ðŸ”¨ Build"
  artifacts:
    expire_in: 1 week
    paths:
      - dist/*.whl
  dependencies:
    - code-linting
    - examples-test
    - unit-test
  rules:
    - !reference [.default_rules, rules]
    - if: $CI_COMMIT_TAG
  script:
    - make install
    - make build

publish:
  stage: "ðŸš€ Publish"
  dependencies:
    - build
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - pip install twine
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
