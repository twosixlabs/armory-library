---
name: 🐛📦 CI Tests

on:
  push:
    branches:
      - master
      - develop

  pull_request:
    branches:
      - master
      - develop

  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  # ------------- Code Quality ---------------
  formatting-test:
    name: 🦄 Code Quality
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: true
      matrix:
        os:
        - ubuntu
        python-version:
          - 3.9
    steps:
      - name: 🐍 Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1

      - name: 🌱 Setup Test Enviroment
        with:
          python-version: ${{ matrix.python-version }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build
          pip install --no-compile --editable '.[developer]'

      - name: 🐄 Got git?
        uses: actions/checkout@v2

        # Get history and tags for SCM versioning to work
      - name: 📩 Checkout the Source
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Run commit hooks
        run: >-
          VERSION=`git describe --tags $(git rev-list --tags --max-count=1)`
          echo "💄 Running pre-commit hooks for Armory version ${VERSION}"

          bash tools/pre-commit.sh
        # RESULT=$?
        # if [ $RESULT -ne 0 ]; then
        #   echo "🚨 Pre-commit hooks failed. Please run 'pre-commit run --all-files' locally to fix the issues 🚑"
        #   exit 1
        # fi


  # ----------- Bare Metal Tests -------------
  host-test:
    name: 📝 Basic Configuration Tests [Bare Metal]
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu
        - macos
        python-version:
        - 3.7
        - 3.8
        - 3.9
        - 3.10
    steps:
      - name: 🐍 Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1

      - name: 🐍 Switch to Python v${{ matrix.python-version }}
        with:
          python-version: ${{ matrix.python-version }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build

      - name: 🐄 Got git?
        uses: actions/checkout@v2

        # Get history and tags for SCM versioning to work
      - name: 📩 Checkout the Source
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: ⚙️ Install Armory
        shell: bash
        run: |
          pip install --no-compile --editable '.[developer]'
          pip install --no-compile --editable '.[host]'
          armory configure --use-defaults

      - name: 🤞 Run Host Configuration Tests
        shell: bash
        run: |
          pytest -c pyproject.toml -s ./tests/unit/test_configuration.py


  end-to-end-test:
    name: 📝 End-to-end No Docker Tests [Bare Metal]
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu
        - macos
        python-version:
        - 3.7
        - 3.8
        - 3.9
        - 3.10
    steps:
      - name: 🐍 Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1

      - name: 🐍 Switch to Python v${{ matrix.python-version }}
        with:
          python-version: ${{ matrix.python-version }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build

      - name: 🐄 Got git?
        uses: actions/checkout@v2

        # Get history and tags for SCM versioning to work
      - name: 📩 Checkout the Source
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: ⚙️ Install Armory
        shell: bash
        run: |
          pip install --no-compile --editable '.[developer]'
          pip install --no-compile --editable '.[host]'
          armory configure --use-defaults

      - name: 🤞 Run End-to-end Tests
        shell: bash
        run: |
          pytest -c pyproject.toml -s ./tests/end_to_end/test_no_docker.py


  unit-tests:
    name: 📝 Unit Tests [Bare Metal]
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu
        - macos
        python-version:
        - 3.7
        - 3.8
        - 3.9
        - 3.10
    steps:
      - name: 🐍 Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1

      - name: 🐍 Switch to Python v${{ matrix.python-version }}
        with:
          python-version: ${{ matrix.python-version }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build

      - name: 🐄 Got git?
        uses: actions/checkout@v2

        # Get history and tags for SCM versioning to work
      - name: 📩 Checkout the Source
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: ⚙️ Install Armory
        shell: bash
        run: |
          pip install --no-compile --editable '.[developer]'
          pip install --no-compile --editable '.[host]'
          armory configure --use-defaults

      - name: 🤞 Run Unit Tests
        shell: bash
        run: |
          pytest -c pyproject.toml -m "not docker_required and unit" ./tests/


  # ------------ Container Tests -------------
  docker-torch-unit:
    name: ☁️ Pytorch Unit Tests [Container]
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: true
      matrix:
        os:
        - ubuntu
        python-version:
          - 3.9
    steps:
      - name: 🐍 Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1

      - name: 🐍 Switch to Python v${{ matrix.python-version }}
        with:
          python-version: ${{ matrix.python-version }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build

      - name: 🌱 Setup Test Enviroment
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
        run: |
          pip install --no-compile --editable '.[developer]'

      - name: 🐄 Got git?
        uses: actions/checkout@v2

        # Get history and tags for SCM versioning to work
      - name: 📩 Checkout the Source
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: ⚙️ Install Armory
        shell: bash
        run: |
          pip install --no-compile --editable '.[developer]'
          pip install --no-compile --editable '.[host]'
          armory configure --use-defaults

      - name: 🚧 Build the Container
        run: |
          python docker/build.py pytorch

      - name: 🤞 Run Unit tests
        run: |
          docker run -w /armory-repo/ twosixarmory/pytorch:$(armory --version) pytest -m "not docker_required and unit" ./tests/

  # docker-tf2-unit:
  #   name: ☁️ Docker TF2 Unit Tests
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v1
  #       with:
  #         python-version: '3.9'
  #     - name: 🚧 Build Docker
  #       run: |
  #         pip install --no-compile --editable '.[developer]'
  #         pip install --no-compile --editable '.[host]'
  #         python docker/build.py tf2
  #     - name: Run Unit tests
  #       run: |
  #         docker run -w /armory-repo/ twosixarmory/tf2:$(armory --version) pytest -m "not docker_required and unit" ./tests/

  # docker-deepspeech-unit:
  #   name: ☁️ Docker Deepspeech Unit Tests
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v1
  #       with:
  #         python-version: '3.9'
  #     - name: 🚧 Build Docker
  #       run: |
  #         pip install --no-compile --editable '.[developer]'
  #         pip install --no-compile --editable '.[host]'
  #         python docker/build.py pytorch-deepspeech
  #     - name: Run Unit tests
  #       run: |
  #         docker run -w /armory-repo/ twosixarmory/pytorch-deepspeech:$(armory --version) \
  #         pytest -m "not docker_required and unit" ./tests/
  #         docker run -w /armory-repo/ twosixarmory/pytorch-deepspeech:$(armory --version) \
  #         pytest -m "pytorch_deepspeech" ./tests/


      # - name: 📦 Test Build
      #   run: python -m build

# --------------------|---------------------
#
#
# --------------------|---------------------
