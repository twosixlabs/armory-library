[project]
requires-python = ">=3.8"

name        = "armory-testbed"
description = "Adversarial Robustness Test Bed"
readme      = "README.md"
dynamic     = [ "version" ]
license     = "MIT"
authors = [
    { name = "Two Six Technologies", email = "armory@twosixtech.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "setuptools_scm",
    "jsonschema",
    "loguru",
    "PyYAML",
    "requests",
    "toml",
]

[project.urls]
Homepage = "https://github.com/twosixlabs/armory"
BugTracker = "https://github.com/twosixlabs/armory/issues"
Documentation = "https://armory.readthedocs.io/en/latest/"

[project.scripts]
armory = "charmory.examples.cli:main"
charmory = "charmory.examples.cli:main"


# please see docs/getting_started.md#the-armory-flavors for how these
# optional dependencies work
[project.optional-dependencies]
developer =[
    "pytest",
    "hatch", # build tool
    "wheel", # build tool
    "mkdocs",
    "black",
    "isort",
    "flake8",
    "bandit[toml]", # code scanning
]

tracking = [
    "mlflow",
]

engine = [
    "adversarial-robustness-toolbox",
    "Pillow",              # Data dependencies
    "boto3",               # Needed for armory.data.utils
    "botocore" ,           # Needed for armory.data.utils
    "ffmpeg-python",       # Needed for armory.utils.export
    "pydub",               # this is in ART's extra-requires
    "tidecv",              # Needed for TIDE metrics
    # Both `opencv-python` and `opencv-python-headless` must specify
    # the same version.
    "opencv-python == 4.5.5.62",          # Needed for CARLA baseline scenario
    "opencv-python-headless == 4.5.5.62", # Needed for CARLA baseline scenario
    "tensorboardx",
]

math = [
    "scikit-learn == 1.2.0",  # ART requires scikit-learn >= 0.22.2, < 1.2.0
    "scipy == 1.7.2",         # ART requires scipy >= 1.4.1, < 1.10.1
    "numpy",
    "pandas",
    "matplotlib",
]

pytorch = [
    "torch",
    "torchaudio",
    "torchvision",
]

deepspeech = [
    "python-levenshtein",
    "torchmetrics < 0.8.0",
    "sox",
    "librosa",
    "google-cloud-storage",
    "transformers",
    "pytorch-lightning < 1.5.0",
]

tensorflow = [
    "tf-models-official",
    "tensorflow >= 2.10.0",
]

datasets = [
    "tensorflow-datasets >= 4.6.0",
    "protobuf",
]

datasets-builder = [
    "apache-beam >= 2.22.0",
]

all = [
    "armory-testbed[developer]",
    "armory-testbed[tracking]",
    "armory-testbed[engine]",
    "armory-testbed[math]",
    "armory-testbed[pytorch]",
    # "armory-testbed[deepspeech]",
    "armory-testbed[tensorflow]",
    # "armory-testbed[datasets]",
    # "armory-testbed[datasets-builder]",
]


[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling>=1.10.0",
  "hatch-vcs",
]

[tool.hatch.build]
ignore-vcs   = false
reproducible = true
directory    = "dist"
sources      = [ "src" ]
include = [
  "LICENSE",
  "pyproject.toml",
  "README.md"
]

[tool.hatch.metadata]
allow-direct-references = true


[tool.hatch.version]
source = "vcs"
path   = "src/armory/__about__.py"

[tool.hatch.version.raw-options]
version_scheme = "post-release"

[tool.hatch.build.hooks.vcs]
version-file = "src/armory/__about__.py"
template = """
# coding: utf-8
# File automatically generated by setuptools_scm.
# Do not change or track in version control.
__version__ = {version!r}
version_tuple = {version_tuple!r}
"""


# Tools
[tool.setuptools_scm]
# the presence of this empty block stops setuptools_scm from complaining

[tool.bandit]
recursive = true
targets = [ "armory" ]
skips   = [
  "B101",  # Ignore defensive `assert`s (especially useful for mypy)
  "B404",  # Ignore warnings about importing subprocess
  "B603",  # Ignore warnings about calling subprocess.Popen without shell=True
  "B607",  # Ignore warnings about calling subprocess.Popen without a full path to executable
]

[tool.pytest.ini_options]
addopts    = "-ra -q"
log_level  = "ERROR"
testpaths  = [ "tests" ]
log_cli = true
filterwarnings = [ ]
markers = [
  "slow",                # This test is slow
  "online",              # This test needs open internet access
  "end_to_end",          # Full End to End Test (typically slow)
  "unit",                # These are Unit Tests (fast and lightweight)
]
# TODO: Add these to the pytest options. From armory/validation/test_config
# addopts = -p no:cacheprovider
# filterwarnings =
#     ignore::DeprecationWarning
#     ignore::RuntimeWarning
#     ignore::UserWarning:tensorflow*
#     ignore::UserWarning:torch*
#     ignore::Warning:art*


# ------------ pre-commit hooks ------------
[tool.vulture]
paths             = ["src"]
ignore_decorators = ["#~vulture.ignore~#"]
min_confidence    = 80
make_whitelist    = true
sort_by_size      = true
verbose           = true

[tool.isort]
profile = "black"
force_sort_within_sections = true
