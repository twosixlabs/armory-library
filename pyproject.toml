[project]
requires-python = ">=3.8"

name          = "armory-testbed"
description   = "Adversarial Robustness Test Bed"
readme        = "README.md"
dynamic       = [ "version" ]
license       = "MIT"
license-files = { paths = ["LICENSE"] }
authors = [
    { name = "Two Six Technologies", email = "armory@twosixtech.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "setuptools_scm",  # versioning
    "loguru",          # logging
    "pytest",          # testing
    "requests",        # http requests
    "jsonschema",      # config validation
    "PyYAML",          # config parsing
    "toml",            # config parsing

[project.urls]
Homepage = "https://github.com/twosixlabs/armory"
BugTracker = "https://github.com/twosixlabs/armory/issues"
Documentation = "https://armory.readthedocs.io/en/latest/"

[project.scripts]
armory = "armory.__main__:main"


# please see docs/getting_started.md#the-armory-flavors for how these
# optional dependencies work
[project.optional-dependencies]
developer =[
    "hatch", # build tool
    "wheel", # build tool
    "mkdocs",
    "black[jupyter]==22.*",
    "isort",
    "flake8",
    "bandit[toml]", # code scanning
    "hydra-core",   # configuration
]

engine = [
    "adversarial-robustness-toolbox == 1.13.0",
    "Pillow",              # Data dependencies
    "boto3",               # Needed for armory.data.utils
    "botocore" ,           # Needed for armory.data.utils
    "ffmpeg-python",       # Needed for armory.utils.export
    "pydub",               # this is in ART's extra-requires
    "tidecv",              # Needed for TIDE metrics
    # "tensorboardx",

    # Both `opencv-python` and `opencv-python-headless` must specify
    # the same version.
    "opencv-python == 4.5.5.62",          # Needed for CARLA baseline scenario
    "opencv-python-headless == 4.5.5.62", # Needed for CARLA baseline scenario

    # pytorch
    "torch",
    "torchaudio",
    "torchvision",

    # tensorflow
    "tf-models-official",
    "tensorflow >= 2.10.0",

    # deepspeech
    "python-levenshtein",
    "torchmetrics < 0.8.0",
    "sox",
    "librosa",
    "google-cloud-storage",
    "transformers",
    "pytorch-lightning < 1.5.0",

    # math
    "numpy",
    "pandas",
    "scipy >= 1.4.1",
    "scikit-learn < 1.1.0",   # ART requires scikit-learn >=0.22.2,<1.1.0
    "matplotlib",

    # datasets
    "tensorflow-datasets >= 4.6.0",
    "protobuf",

    # datasets-builder
    "apache-beam >= 2.22.0",
]

[project.urls]
Source        = "https://github.com/twosixlabs/armory"
Documentation = "https://armory.readthedocs.io/en/latest/"

[project.scripts]
armory = "armory.__main__:main"


# please see docs/getting_started.md#the-armory-flavors for how these
# optional dependencies work
[project.optional-dependencies]
developer =[
    "hatch", # build tool
    "wheel", # build tool
    "mkdocs",
    "black[jupyter]==22.*",
    "isort",
    "flake8",
    "bandit[toml]", # code scanning
    "hydra-core",   # configuration
]

[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling>=1.10.0",
  "hatch-vcs",
]


[tool.hatch.build]
ignore-vcs   = false
reproducible = true
directory    = "dist"
sources     = [ "src" ]
include = [
  "src/",
  "tests/",
  "pyproject.toml",
]
# exclude = [
# ]


[tool.hatch.build.hooks.vcs]
version-file = "src/armory/__about__.py"
template = """
# coding: utf-8
# File automatically generated by setuptools_scm.
# Do not change or track in version control.
__version__ = {version!r}
version_tuple = {version_tuple!r}
"""

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
source = "vcs"
path   = "src/armory/__about__.py"

[tool.hatch.version.raw-options]
version_scheme = "post-release"


# Tools
[tool.setuptools_scm]
# the presence of this empty block stops setuptools_scm from complaining

[tool.bandit]
recursive = true
targets = [ "armory" ]
skips   = [
  "B101",  # Ignore defensive `assert`s (especially useful for mypy)
  "B404",  # Ignore warnings about importing subprocess
  "B603",  # Ignore warnings about calling subprocess.Popen without shell=True
  "B607",  # Ignore warnings about calling subprocess.Popen without a full path to executable
]

[tool.pytest.ini_options]
addopts    = "-ra -q"
log_level  = "ERROR"
testpaths  = [ "tests" ]
log_cli = true
filterwarnings = [ ]
markers = [
  "slow",                       # This test is slow
  "online",                     # This test needs open internet access
  "keras",                      # This test requires tf1.compat support for keras
  "tf1",                        # This test requires tf1 support (tf2.compat.v1 adapter)
  "docker_required",            # This Test Requires Docker to run
  "end_to_end",                 # Full End to End Test (typically slow)
  "unit",                       # These are Unit Tests (fast and lightweight)
  "pytorch_deepspeech",         # This test requires pytorch-deepspeech docker container (or equivalent dependencies) to run
]
# TODO: Add these to the pytest options. From armory/validation/test_config
# addopts = -p no:cacheprovider
# filterwarnings =
#     ignore::DeprecationWarning
#     ignore::RuntimeWarning
#     ignore::UserWarning:tensorflow*
#     ignore::UserWarning:torch*
#     ignore::Warning:art*


# ------------ pre-commit hooks ------------
[tool.vulture]
paths             = ["src"]
ignore_decorators = ["#~vulture.ignore~#"]
min_confidence    = 80
make_whitelist    = true
sort_by_size      = true
verbose           = true

[tool.isort]
profile = "black"
force_sort_within_sections = true
