[project]
requires-python = ">=3.7"

name        = "armory"
description = "Adversarial Robustness Test Bed"
dynamic     = [ "version" ]
license     = "MIT"
authors = [
  { name = "Two Six Technologies", email = "armory@twosixtech.com" },
]

classifiers = [
  "Development Status :: 3 - Alpha",
  "License :: OSI Approved :: MIT License",
  "Environment :: Console",
  "Natural Language :: English",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Topic :: Utilities",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
  "wheel",
  "requests",
  "docker==6.0.0",
  "docopt==0.6.2",
  "jsonschema==4.16.0",
  "loguru==0.6.0",
  "pytest==7.1.3",
  "pytest-cov==3.0.0",
  "pytest-mock==3.8.2",
  "PyYAML==5.4.1",
  "requests==2.28.1",
  "toml==0.10.2",
  "tomli==2.0.1",
]

[project.urls]
Source        = "https://github.com/twosixlabs/armory"
Documentation = "https://armory.readthedocs.io/en/latest/"

[project.scripts]
armory = "armory.__main__:main"


[project.optional-dependencies]
####################### DEVELOPER #######################
# Example:
#   $ pip install --force-reinstall --no-compile --editable '.[developer]'
#   $ hatch build --clean
#########################################################
developer =[
  # --------- build tools ----------
  "hatch",
  "pre-commit",
  # ---------- formatting ----------
  "black",
  "black[jupyter]==22.6.0",
  "flake8==5.0.4",
  "tox==3.26.0",
  "mkdocs==1.3.1",
  "Markdown==3.3.7",
  "yamllint==1.28.0",
  # ----------- testing ------------
  "click==8.1.3",
  "Jinja2==3.1.2",
  "podman==4.2.0",
]

######################## HOST ###########################
# NOTE:  Install these dependencies if running in a
#        local environment; e.g. w/out Docker.
#
# NOTE:  Currently, this only provides a `pytorch`
#        environment, covering the CIFAR-10 & CARLA
#        armory experiments.  A future release will be
#        more comprehensive.
#########################################################
host = [
  # ------------- art --------------
  "adversarial-robustness-toolbox == 1.11.1",
  # ----------- pytorch ------------
  "sox == 1.4.1",
  "librosa == 0.9.2",
  "google-cloud-storage == 2.5.0",
  "torch == 1.12.1",
  "torchvision == 0.13.1",
  "torchaudio == 0.12.1",
  "torchmetrics >= 0.7.0",
  "transformers",
  "pytorch-lightning == 1.4.9",
  "hydra-core == 1.2.0",
  "hydra-configs-pytorch-lightning @ git+https://github.com/romesco/hydra-lightning/#subdirectory=hydra-configs-pytorch-lightning",
  # ---------- tensorflow ----------
  "protobuf==3.20.1",
  "pycocotools==2.0.5",
  "tensorflow == 2.8.0",
  "tensorboardx == 2.5.1",
  "tensorflow-datasets == 4.6.0",
  "tf-models-official",
  "object_detection @ git+https://github.com/tensorflow/models/#subdirectory=research/object_detection/packages/tf2",
  # ------------ dataset ------------
  "apache-beam >= 2.22.0",
  "pydub >= 0.24.1",
  # ------------- numpy -------------
  "numpy",
  "scipy>=1.3.2",
  "scikit-learn>=1.0.0",
  "matplotlib == 3.5.3",
  "setuptools==60.0.0",
  # ----------- jupyter ------------
  "jupyterlab == 3.4.7",
  # ------------- misc -------------
  "python-levenshtein",
  "Pillow == 9.2.0",           # Data dependencies
  "boto3 == 1.24.72",          # Needed for armory.data.utils
  "botocore == 1.27.77",       # Needed for armory.data.utils
  "ffmpeg-python == 0.2.0",    # Needed for armory.utils.export
  "opencv-python == 4.6.0.66"  # Needed for CARLA baseline scenario
]

testing = [
  "onnxruntime",
  "onnxruntime_tools",
  "onnxruntime-gpu",
]


#########################################
# Build System
#   Versioning Documentation:
#     - https://microsoft.github.io/nlp-recipes/VERSIONING.html
#########################################
[build-system]
requires      = [ "hatchling>=1.8.0", "hatch-vcs" ]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build]
ignore-vcs   = false
reproducible = true
directory    = "dist"
include = [
  "armory/",
  "tests/",
  "scenario_configs/",
]
exclude = [
  "tools/",
]

[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "post-release" }
path = "armory/__about__.py"
# fallback-version = "0.0.0"

[tool.hatch.build.hooks.vcs]
version-file = "armory/__about__.py"
template = """
# coding: utf-8
# File automatically generated by setuptools_scm.
# Do not change or track in version control.
__version__ = {version!r}
version_tuple = {version_tuple!r}
"""

#########################################
# Tools
#########################################
# ------------ black ------------
[tool.black]
line-length = 120
skip_magic_trailing_comma = true

# ------------ pytest ------------
[tool.pytest.ini_options]
minversion = "6.0"
addopts    = "-ra -q"
log_level  = "ERROR"
testpaths  = [ "tests" ]
filterwarnings = []
markers = [
  "slow",                       # This test is slow
  "online",                     # This test needs open internet access
  "keras",                      # This test requires tf1.compat support for keras
  "tf1",                        # This test requires tf1 support (tf2.compat.v1 adapter)
  "docker_required",            # This Test Requires Docker to run
  "end_to_end",                 # Full End to End Test (typically slow)
  "unit",                       # These are Unit Tests (fast and lightweight)
  "pytorch_deepspeech",         # This test requires pytorch-deepspeech docker container (or equivalent dependencies) to run
]


# ------------ pylint ------------
[tool.pylint.'MESSAGES CONTROL']
max-line-length=120
disable = [
  "fixme",
  "c-extension-no-member",
  "wrong-spelling-in-comment",
  "wrong-spelling-in-docstring",

  # Review:
  "missing-docstring",
  "unused-argument",
  "no-member",
  "line-too-long",
  "protected-access",
  "too-few-public-methods",
  "raise-missing-from",
  "invalid-name",
  "logging-fstring-interpolation",
  "too-many-locals",
  "duplicate-code",
  "too-many-arguments",
  "arguments-differ",
  "consider-using-f-string",
  "no-else-return",
  "unused-variable",
  "attribute-defined-outside-init",
  "too-many-instance-attributes",
  "super-with-arguments",
  "anomalous-backslash-in-string",
  "redefined-builtin",
  "logging-format-interpolation",
  "f-string-without-interpolation",
  "abstract-method",
  "too-many-branches",
  "trailing-whitespace",
  "unspecified-encoding",
  "unidiomatic-typecheck",
  "no-name-in-module",
  "dangerous-default-value",
  "consider-using-with",
  "redefined-outer-name",
  "arguments-renamed",
  "unnecessary-pass",
  "broad-except",
  "unnecessary-comprehension",
  "subprocess-run-check",
  "singleton-comparison",
  "consider-iterating-dictionary",
  "too-many-nested-blocks",
  "undefined-loop-variable",
  "too-many-statements",
  "consider-using-in",
  "bare-except",
  "too-many-lines",
  "unexpected-keyword-arg",
  "simplifiable-if-expression",
  "use-list-literal",

  # Immediate Review:
  "cyclic-import",
  "import-outside-toplevel",
  "deprecated-method",
]
[tool.pylint.'DESIGN']
max-args=7
[tool.pylint.'SIMILARITIES']
min-similarity-lines=6


# ------------ pre-commit hooks ------------
[tool.vulture]
paths             = ["src"]
ignore_decorators = ["#~vulture.ignore~#"]
min_confidence    = 80
make_whitelist    = true
sort_by_size      = true
verbose           = true

